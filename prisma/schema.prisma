generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserPicture {
  JESSICA
  MAX
  FELIX
  BARSIK
}

enum NoteType {
  LIGHT
  MEDIUM
  HARD
  MEDICINE
  TEMPERATURE
}

enum ProcedureType {
  APPOINTMENT
  EXAMINATION
  VACCINATION
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(50)
  birthDate    DateTime       @db.Date @map("birth_date")
  gender       Gender
  email        String         @unique @db.VarChar(100)
  password     String         @db.VarChar(256)
  picture      UserPicture    @default(JESSICA)
  notes        Note[]
  procedures   Procedure[]
  appointments Appointment[]

  @@map("users")
}

model Note {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  startedAt   DateTime @map("started_at")
  name        String   @db.VarChar(50)
  comment     String?  @db.VarChar(100)
  type        NoteType

  @@map("notes")
}

model Procedure {
  id        Int              @id @default(autoincrement())
  userId    Int              @map("user_id")
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  frequency Int
  type      ProcedureType
  lastVisit DateTime         @db.Date @map("last_visit") @default(now())
  name      String           @db.VarChar(50)

  @@map("procedures")
}

model Recommendation {
  id         Int             @id @default(autoincrement())
  type       ProcedureType
  name       String          @db.VarChar(50)
  frequency  Int
  categoryId Int?            @map("category_id")
  category   Category?       @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("recommendations")
}

model Category {
  id                Int                             @id @default(autoincrement())
  ageLeft           Int?                            @map("age_left")
  ageRight          Int?                            @map("age_right")
  gender            Gender
  recommendations   Recommendation[]

  @@map("categories")
}

model Appointment {
  id        Int              @id @default(autoincrement())
  userId    Int              @map("user_id")
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name      String           @db.VarChar(50)
  type      ProcedureType
  startedAt DateTime         @map("started_at")
  comment   String?          @db.VarChar(100)

  @@map("appointments")
}

model Advice {
  id          Int    @id @default(autoincrement())
  description String @db.VarChar(50)

  @@map("advices")
}

model Medicine {
  id                 Int       @id @default(autoincrement())
  name               String
  indication         String
  contraindication   String
  sideEffects        String    @map("side_effects")
  dosage             String

  @@map("medicines")
}
